name: Open new PR on comment

on:
  issue_comment:
    types: [created]

jobs:
  process_command:
    if: github.event.issue.pull_request != '' && contains(github.event.comment.body, 'cherry-pick')
    runs-on: ubuntu-latest
    outputs:
      commits: ${{ steps.command.outputs.commits }}
      branches: ${{ steps.command.outputs.branches }}
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get PR target branch
        id: target
        run: |
          target_branch=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.issue.number }}" | jq -r .base.ref)
          echo "::set-output name=$target_branch"

      - name: Check PR Status
        # Check if PR has been merged
        run: |
          echo "${{ github.event.issue.pull_request.merged_at }}"
          if [[ "${{ github.event.issue.pull_request.merged_at }}" == "" ]]; then
            echo "::error::Pull request has not been merged yet. Cannot cherry-pick commits."
            exit 1
          fi

      - name: Parse cherry-pick command
        id: command
        shell: bash
        run: |
          set -f
          command=($(echo "${{ github.event.comment.body }}" | grep cherry-pick))
          command=("${command[@]:1}")

          has_separator=false
          arg_type=hash
          commits=()
          branches=()
          for token in ${command[@]}; do
            if [[ "$token" == "into" ]]; then
              arg_type=branch
              has_separator=true
            else
              if [[ "$arg_type" == "hash" ]]; then
                commits+=( $token )
              elif [[ "$arg_type" == "branch" ]]; then
                branches+=( $token )
              fi
            fi
          done
          if [ "$has_separator" = false ]; then
            echo "::error::Syntax error in cherry-pick command: missing separator."
            exit 1
          fi
          echo "commits=$(jq -cn '$ARGS.positional' --args -- "${commits[@]}")" >> $GITHUB_OUTPUT
          echo "branches=$(jq -cn '$ARGS.positional' --args -- "${branches[@]}")" >> $GITHUB_OUTPUT

      - name: Check commit list
#        env:
#          GH_TOKEN: ${{ github.token }}
        run: |
          for commit in ${{ steps.command.outputs.commit }}; do
            if git merge-base --is-ancestor $commit ${{ steps.target.outputs.name }}; then 
              echo "Commit $commit found in ${{ steps.target.outputs.name }} branch."
            else
              echo "::error::Could not find commit in ${{ steps.target.outputs.name }} branch."
              exit 1
            fi
          done
  
  open_pr:
    runs-on: ubuntu-latest 
    needs: process_command
    strategy:
      matrix:
        commit: ${{ fromJson(needs.process_command.outputs.commits) }}
        branch: ${{ fromJson(needs.process_command.outputs.branches) }}
    steps:
      - name: Test
        run: echo ${{ matrix.commit }} ${{ matrix.branch }}

#      - name: Checkout PR
        # Since this is triggerd by a comment, the checkout repository step will
        # checkout the main branch, not the one from the PR.
#        env:
#          GH_TOKEN: ${{ github.token }}
#        run: gh pr checkout ${{ github.event.issue.number }}
